{"version":3,"sources":["todo.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","todo","_render","selectedIndex","todoList","innerHTML","todos","forEach","item","status","title","undefined","children","querySelector","select","getTodos","callback","request","XMLHttpRequest","open","onload","this","JSON","parse","response","send","addTodo","input","addTodoInput","value","newPosition","push","newTodo","_id","setRequestHeader","stringify","alert","completeTodo","index","dbId","updatedTodo","editTodo","cancelTodo","updateTodo","deleteTodo","splice","container","document","getElementById","addEventListener","event","concat","indexOf","target","closest","id","action","getAttribute","keyCode","Element","prototype","matches","msMatchesSelector","selector","el","parentElement"],"mappings":"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","file":"todo.js","sourcesContent":["// the todo Revealing Module Pattern\nlet todo = (function() {\n\n  // cache DOM\n  let container = document.getElementById('todo');\n  let todoList = container.querySelector('[data-todo=\"list\"]');\n  let addTodoInput = container.querySelector('[data-todo=\"add-item\"]');\n\n  let todos = [];\n\n  // Bind Event(s) (really it's just one event delegation)\n  container.addEventListener('click', (event) => {\n    // get the index using ES6 destructuring, then back to an array, then indexOf\n    let index = [...todoList.children].indexOf(event.target.closest('[data-todo^=\"item\"]'));\n    // get the database ID:\n    let id = index >= 0 ? todos[index]._id : null;\n    let action = event.target.getAttribute('data-todo');\n    if (action === 'edit') editTodo(index);\n    else if (action === 'delete') deleteTodo(index,id);\n    else if (action === 'add') addTodo();\n    else if (action === 'cancel') cancelTodo(index);\n    else if (action === 'update') updateTodo(index,id);\n    else if (action === 'checkmark') completeTodo(index,id);\n  });\n\n  container.addEventListener('keydown', (event) => {\n    if (event.keyCode === 13) {\n      let action = event.target.getAttribute('data-todo');\n      if (action === 'add-item') addTodo();\n      else {\n        let index = [...todoList.children].indexOf(event.target.closest('[data-todo=\"item\"]') || event.target.closest('[data-todo=\"item-edit\"]'));\n        if (action === 'edit-item') updateTodo(index);\n      }\n    }\n  });\n\n  container.addEventListener('keyup', (event) => {\n    if (event.keyCode === 27) {\n      let action = event.target.getAttribute('data-todo');\n      let index = [...todoList.children].indexOf(event.target.closest('[data-todo=\"item\"]') || event.target.closest('[data-todo=\"item-edit\"]'));\n      if (action === 'edit-item') cancelTodo(index);\n    }\n  });\n\n  getTodos(_render);\n\n  // _render is the only place we repaint:\n  function _render(selectedIndex) {\n    todoList.innerHTML = '';\n    todos.forEach(item => {\n      if (item.status !== 'edit') {\n        // this one displays the todo item:\n        todoList.innerHTML +=\n          `<li class=\"list-group-item${item.status === 'complete' ? ' is-complete' : ''}\" data-todo=\"item\">\n            <label class=\"form-check-label\" data-todo=\"checkmark\">\n              <input class=\"form-check-input\" type=\"checkbox\" ${item.status === 'complete' ? 'checked' : ''} value=\"\" data-todo=\"checkmark\">${item.title}\n            </label>\n            ${item.status === 'complete' ? '<button class=\"btn btn-sm btn-danger\" data-todo=\"delete\">Delete</button>' : '<button class=\"btn btn-sm btn-default\" data-todo=\"edit\">edit</button>'}\n          </li>`;\n      } else { // This one edits:\n        todoList.innerHTML += `<li class=\"list-group-item edit\" data-todo=\"item-edit\">\n          <input class=\"form-control\" data-todo=\"edit-item\" type=\"text\" value=\"${item.title}\">\n          <button class=\"btn btn-sm btn-default\" data-todo=\"cancel\">Cancel</button>\n          <button class=\"btn btn-sm btn-success\" data-todo=\"update\">Update</button>\n          <button class=\"btn btn-sm btn-danger\" data-todo=\"delete\">Delete</button>\n        </li>`;\n      }\n    });\n    if (selectedIndex !== undefined) {\n      todoList.children[selectedIndex].querySelector('[data-todo=\"edit-item\"]').select();\n    }\n  }\n\n  // RESTful events\n  function getTodos(callback) {\n    let request = new XMLHttpRequest();\n    request.open('GET', '/todos', true);\n    request.onload = function() {\n      if (this.status >= 200 && this.status < 400) {\n        todos = JSON.parse(this.response);\n        callback()\n      }\n    };\n    request.send();\n  }\n  function postTodos(){}\n  function putTodos(){}\n\n  function addTodo(input) {\n    // check if there's an input:\n    input = input || addTodoInput.value;\n    // if either one is an input:\n    if(input) {\n      // add it to the list:\n      let newPosition = todos.length;\n      todos.push({\n        title: input,\n        status: 'open'\n      });\n      // add it to the api\n      let request = new XMLHttpRequest();\n      let newTodo = {\n        title: input,\n        status: \"open\"\n      };\n      request.open('POST', '/todos', true);\n      request.onload = function() {\n        if (this.status >= 200 && this.status < 400) {\n          // add the id to the last one:\n          todos[newPosition]._id = JSON.parse(this.response)._id;\n        }\n      };\n      request.setRequestHeader('Content-Type', 'application/json');\n      request.send(JSON.stringify(newTodo));\n      // clear out the input\n      addTodoInput.value = '';\n      _render();\n    } else {\n      alert('Please enter a todo item.');\n    }\n  }\n\n  function completeTodo(index,dbId) {\n    todos[index].status = todos[index].status === 'open' ? 'complete' : 'open';\n    // update the api\n    let updatedTodo = {\n      title: todos[index].title,\n      status: todos[index].status\n    };\n    let request = new XMLHttpRequest();\n    request.open('PUT', `/todos/${dbId}`, true);\n    request.onload = function() {\n      if (this.status >= 200 && this.status < 400) {\n        // add the id to the last one:\n      }\n    };\n    request.setRequestHeader('Content-Type', 'application/json');\n    request.send(JSON.stringify(updatedTodo));\n    _render();\n  }\n\n  function editTodo(index) {\n    todos[index].status = 'edit';\n    _render(index);\n  }\n\n  function cancelTodo(index) {\n    todos[index].status = 'open';\n    _render();\n  }\n\n  function updateTodo(index,dbId) {\n    todos[index].title = todoList.children[index].querySelector('[data-todo=\"edit-item\"]').value;\n    todos[index].status = 'open';\n    // update the api\n    let updatedTodo = {\n      title: todos[index].title,\n      status: todos[index].status\n    };\n    let request = new XMLHttpRequest();\n    request.open('PUT', `/todos/${dbId}`, true);\n    request.onload = function() {\n      if (this.status >= 200 && this.status < 400) {\n        // add the id to the last one:\n      }\n    };\n    request.setRequestHeader('Content-Type', 'application/json');\n    request.send(JSON.stringify(updatedTodo));\n    _render();\n  }\n\n  function deleteTodo(index,dbId) {\n    let request = new XMLHttpRequest();\n    request.open('DELETE', `/todos/${dbId}`, true);\n    request.onload = function() {\n      if (this.status >= 200 && this.status < 400) {\n        // Success!\n      }\n    };\n    request.send();\n    // take 1 object out of the array at the index:\n    todos.splice(index, 1);\n    _render();\n  }\n\n  // return the public methods\n  return {\n    addTodo,\n    completeTodo,\n    editTodo,\n    cancelTodo,\n    updateTodo,\n    deleteTodo\n  }\n})();\n\n\nif (!Element.prototype.matches) Element.prototype.matches = Element.prototype.msMatchesSelector;\nif (!Element.prototype.closest) Element.prototype.closest = function (selector) {\n  let el = this;\n  while (el) {\n    if (el.matches(selector)) return el;\n    el = el.parentElement;\n  }\n};"],"sourceRoot":"frontend/scripts"}