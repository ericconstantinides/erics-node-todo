{"version":3,"sources":["todo.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","todo","_render","selectedIndex","todoList","innerHTML","todos","forEach","item","status","title","undefined","children","querySelector","select","getTodos","callback","request","XMLHttpRequest","open","onload","this","JSON","parse","response","send","addTodo","input","addTodoInput","value","console","log","unshift","alert","completeTodo","index","editTodo","cancelTodo","updateTodo","deleteTodo","dbId","splice","container","document","getElementById","addEventListener","event","concat","indexOf","target","closest","id","_id","action","getAttribute","keyCode","Element","prototype","matches","msMatchesSelector","selector","el","parentElement"],"mappings":"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","file":"todo.js","sourcesContent":["// the todo Revealing Module Pattern\nlet todo = (function() {\n\n  // cache DOM\n  let container = document.getElementById('todo');\n  let todoList = container.querySelector('[data-todo=\"list\"]');\n  let addTodoInput = container.querySelector('[data-todo=\"add-item\"]');\n\n  let todos = [];\n\n  // Bind Event(s) (really it's just one event delegation)\n  container.addEventListener('click', (event) => {\n    // get the index using ES6 destructuring, then back to an array, then indexOf\n    let index = [...todoList.children].indexOf(event.target.closest('[data-todo=\"item\"]')\n      || event.target.closest('[data-todo=\"item-edit\"]'));\n    // get the database ID:\n    let id = index > 0 ? todos[index]._id : null;\n    let action = event.target.getAttribute('data-todo');\n    if (action === 'edit') editTodo(index);\n    else if (action === 'delete') deleteTodo(index,id);\n    else if (action === 'add') addTodo();\n    else if (action === 'cancel') cancelTodo(index);\n    else if (action === 'update') updateTodo(index);\n    else if (action === 'checkmark') completeTodo(index);\n  });\n\n  container.addEventListener('keydown', (event) => {\n    if (event.keyCode === 13) {\n      let action = event.target.getAttribute('data-todo');\n      if (action === 'add-item') addTodo();\n      else {\n        let index = [...todoList.children].indexOf(event.target.closest('[data-todo=\"item\"]') || event.target.closest('[data-todo=\"item-edit\"]'));\n        if (action === 'edit-item') updateTodo(index);\n      }\n    }\n  });\n\n  container.addEventListener('keyup', (event) => {\n    if (event.keyCode === 27) {\n      let action = event.target.getAttribute('data-todo');\n      let index = [...todoList.children].indexOf(event.target.closest('[data-todo=\"item\"]') || event.target.closest('[data-todo=\"item-edit\"]'));\n      if (action === 'edit-item') cancelTodo(index);\n    }\n  });\n\n  getTodos(_render);\n\n  // _render is the only place we repaint:\n  function _render(selectedIndex) {\n    todoList.innerHTML = '';\n    todos.forEach(item => {\n      if (item.status !== 'edit') {\n        // this one displays the todo item:\n        todoList.innerHTML +=\n          `<li class=\"list-group-item${item.status === 'complete' ? ' is-complete' : ''}\" data-todo=\"item\">\n            <label class=\"form-check-label\" data-todo=\"checkmark\">\n              <input class=\"form-check-input\" type=\"checkbox\" ${item.status === 'complete' ? 'checked' : ''} value=\"\" data-todo=\"checkmark\">${item.title}\n            </label>\n            ${item.status === 'complete' ? '<button class=\"btn btn-sm btn-danger\" data-todo=\"delete\">Delete</button>' : '<button class=\"btn btn-sm btn-default\" data-todo=\"edit\">edit</button>'}\n          </li>`;\n      } else { // This one edits:\n        todoList.innerHTML += `<li class=\"list-group-item edit\" data-todo=\"item-edit\">\n          <input class=\"form-control\" data-todo=\"edit-item\" type=\"text\" value=\"${item.title}\">\n          <button class=\"btn btn-sm btn-default\" data-todo=\"cancel\">Cancel</button>\n          <button class=\"btn btn-sm btn-success\" data-todo=\"update\">Update</button>\n          <button class=\"btn btn-sm btn-danger\" data-todo=\"delete\">Delete</button>\n        </li>`;\n      }\n    });\n    if (selectedIndex !== undefined) {\n      todoList.children[selectedIndex].querySelector('[data-todo=\"edit-item\"]').select();\n    }\n  }\n\n  // RESTful events\n  function getTodos(callback) {\n    let request = new XMLHttpRequest();\n    request.open('GET', '/', true);\n    request.onload = function() {\n      if (this.status >= 200 && this.status < 400) {\n        // Success!\n        // todos = Object.keys(data).map((k) => data[k])\n        todos = JSON.parse(this.response);\n        callback()\n      }\n    };\n    request.send();\n  }\n  function postTodos(){}\n  function putTodos(){}\n\n  function addTodo(input) {\n    // check if there's an input:\n    input = input || addTodoInput.value;\n    // if either one is an input:\n    if(input) {\n      let request = new XMLHttpRequest();\n      request.open('POST', `/TEMP?title=${input}&status=open`, true);\n      request.onload = function() {\n        if (this.status >= 200 && this.status < 400) {\n          // we should really get the id here:\n          console.log(JSON.parse(this.response));\n        }\n      };\n      request.send();\n      // add it to the top:\n      todos.unshift({\n        title: input,\n        status: 'open'\n      });\n      // clear out the input\n      addTodoInput.value = '';\n      _render();\n    } else {\n      alert('Please enter a todo item.');\n    }\n  }\n\n  function completeTodo(index) {\n    todos[index].status = todos[index].status === 'open' ? 'complete' : 'open';\n    _render();\n  }\n\n  function editTodo(index) {\n    todos[index].status = 'edit';\n    _render(index);\n  }\n\n  function cancelTodo(index) {\n    todos[index].status = 'open';\n    _render();\n  }\n\n  function updateTodo(index) {\n    todos[index].title = todoList.children[index].querySelector('[data-todo=\"edit-item\"]').value;\n    todos[index].status = 'open';\n    _render();\n  }\n\n  function deleteTodo(index,dbId) {\n    let request = new XMLHttpRequest();\n    request.open('DELETE', `/api/todos/${dbId}`, true);\n    request.onload = function() {\n      if (this.status >= 200 && this.status < 400) {\n        // Success!\n      }\n    };\n    request.send();\n    // take 1 object out of the array at the index:\n    todos.splice(index, 1);\n    _render();\n  }\n\n  // return the public methods\n  return {\n    addTodo,\n    completeTodo,\n    editTodo,\n    cancelTodo,\n    updateTodo,\n    deleteTodo\n  }\n})();\n\n\nif (!Element.prototype.matches) Element.prototype.matches = Element.prototype.msMatchesSelector;\nif (!Element.prototype.closest) Element.prototype.closest = function (selector) {\n  let el = this;\n  while (el) {\n    if (el.matches(selector)) return el;\n    el = el.parentElement;\n  }\n};"],"sourceRoot":"frontend/scripts"}